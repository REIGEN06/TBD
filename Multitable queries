--Многотабличные запросы

-- 1.Вывести все имена и фамилии студентов, и название хобби, которым занимается этот студент.
-- SELECT st.name,
-- 	st.surname,
-- 	hobby.name
-- FROM student st, hobby, students_hobby sh
-- WHERE st.id = sh.student_id AND hobby.id = sh.hobby_id;

-- 2.Вывести информацию о студенте, занимающимся хобби самое продолжительное время.
-- SELECT st.*, hobby.name, age(sh.finished_at,sh.started_at) AS duration
-- FROM student st, hobby, students_hobby sh
-- WHERE st.id = sh.student_id AND hobby.id = sh.hobby_id 
-- AND AGE(sh.finished_at, sh.started_at) is NOT null
-- ORDER BY duration DESC
-- LIMIT 1;

-- 3.Вывести имя, фамилию, номер зачетки и дату рождения для студентов, средний балл которых выше среднего, а сумма риска всех хобби, которыми он занимается в данный момент, больше 0.9.
-- SELECT st.name,st.surname,st.id as №_zachet, st.bday, st.score, SUM(hobby.risk) as SUM_RISK
-- FROM student st
-- INNER JOIN students_hobby sh ON st.id = sh.student_id
-- INNER JOIN hobby ON hobby.id = sh.hobby_id
-- WHERE st.score > (SELECT SUM(score)/COUNT(score) FROM student)
-- GROUP BY st.id
-- HAVING SUM(hobby.risk) > 0.9;

-- 4.Вывести фамилию, имя, зачетку, дату рождения, название хобби и длительность в месяцах, для всех завершенных хобби Диапазон дат.
--  SELECT st.surname, st.name, st.id as №_zachet, st.bday, hobby.name,extract(year from age(sh.finished_at, sh.started_at)) AS months
-- FROM student st
-- INNER JOIN students_hobby sh ON st.id = sh.student_id
-- INNER JOIN hobby ON hobby.id = sh.hobby_id
-- WHERE AGE(sh.finished_at, sh.started_at) is NOT null

-- 5.Вывести фамилию, имя, зачетку, дату рождения студентов, которым исполнилось N полных лет на текущую дату, и которые имеют более 1 действующего хобби.
-- SELECT st.surname,st.name, st.id as №_zachet, st.bday, extract(year from age(current_date, st.bday)) AS years
-- FROM student st
-- INNER JOIN students_hobby sh ON st.id = sh.student_id
-- INNER JOIN hobby ON hobby.id = sh.hobby_id
-- WHERE extract(year from age(current_date, st.bday)) > 18 AND (SELECT COUNT(hobby.name) FROM hobby WHERE sh.finished_at is null) > 1
-- GROUP BY st.id;

-- 6.Найти средний балл в каждой группе, учитывая только баллы студентов, которые имеют хотя бы одно действующее хобби.
-- SELECT st.n_group, AVG(st.score) as SB
-- FROM student st
-- INNER JOIN students_hobby sh ON st.id = sh.student_id
-- INNER JOIN hobby ON hobby.id = sh.hobby_id
-- WHERE (SELECT COUNT(hobby.name) FROM hobby WHERE sh.finished_at is NULL) >0
-- GROUP BY st.n_group

-- 7.Найти название, риск, длительность в месяцах самого продолжительного хобби из действующих, указав номер зачетки студента.
--  SELECT h.name, h.risk, EXTRACT(year from age(NOW(), sh.started_at)) as Months, st.id as №_zachet
--  FROM student st
--  INNER JOIN students_hobby sh ON st.id = sh.student_id
--  INNER JOIN hobby h ON h.id = sh.hobby_id
--  WHERE sh.finished_at is NULL
--  ORDER BY months DESC
--  LIMIT 1

-- 8.Найти все хобби, которыми увлекаются студенты, имеющие максимальный балл.
-- SELECT h.name, st.score
-- FROM student st
-- INNER JOIN students_hobby sh ON st.id = sh.student_id
-- INNER JOIN hobby h ON h.id = sh.hobby_id
-- WHERE st.score=5
-- ORDER BY st.score DESC

-- 9.Найти все действующие хобби, которыми увлекаются троечники 2-го курса.
-- SELECT h.name
-- FROM student st
-- INNER JOIN students_hobby sh ON st.id = sh.student_id
-- INNER JOIN hobby h ON h.id = sh.hobby_id
-- WHERE st.score = 3 AND LEFT(st.n_group::VARCHAR, 1) = '2' AND sh.finished_at is NULL

-- 10.Найти номера курсов, на которых более 50% студентов имеют более одного действующего хобби.
-- SELECT LEFT(st.n_group::VARCHAR,1) AS №_course
-- FROM student st
-- INNER JOIN students_hobby sh ON st.id = sh.student_id
-- INNER JOIN hobby h ON h.id = sh.hobby_id
-- WHERE (SELECT COUNT(hobby.name) FROM hobby WHERE sh.finished_at is null) > 1

-- 11.Вывести номера группы, в которых не менее 60% студентов имеют балл не ниже 4.
-- SELECT st.n_group, COUNT(st.score) FILTER (WHERE st.score>=4) as four_or_more, COUNT(st.id) as count_of_students
-- FROM student st
-- GROUP BY st.n_group
-- WHERE four_or_more> count_of_students*0.6
--сверху не работает почему-то, поэтому пишу с костылем в виде второго FROM
-- SELECT helper.n_group
-- FROM (SELECT 
-- 	  st.n_group,
-- 	  COUNT(st.score) FILTER (WHERE st.score>=4) as four_or_more,
-- 	  COUNT(st.id) as count_of_students
-- 	  FROM student st
-- 	  GROUP BY st.n_group) helper
-- WHERE four_or_more> count_of_students*0.6

-- 12.Для каждого курса подсчитать количество различных действующих хобби на курсе.
-- SELECT LEFT(st.n_group::VARCHAR,1) course, COUNT(DISTINCT h.id)
-- FROM student st
-- INNER JOIN students_hobby sh ON st.id = sh.student_id
-- INNER JOIN hobby h ON h.id = sh.hobby_id
-- GROUP BY LEFT(st.n_group::VARCHAR,1)

-- 13.Вывести номер зачётки, фамилию и имя, дату рождения и номер курса для всех отличников, не имеющих хобби.
-- Отсортировать данные по возрастанию в пределах курса по убыванию даты рождения. (у меня таких отличников нет, так что я поставил знак "<", чтобы проверить, что работает )
-- SELECT st.id, st.name, st.surname, st.bday, LEFT(st.n_group::VARCHAR,1) course
-- FROM student st WHERE st.score <5 AND st.id NOT IN
-- (SELECT sh.student_id
--  FROM students_hobby sh)
--  ORDER BY course, bday DESC
-- 14.Создать представление, в котором отображается вся информация о студентах, которые продолжают заниматься хобби в данный момент и занимаются им как минимум 5 лет.
-- CREATE OR REPLACE VIEW hobby_5yea AS
-- SELECT st.*
-- FROM student st INNER JOIN students_hobby sh ON st.id=sh.student_id
-- WHERE sh.finished_at IS NULL AND EXTRACT(YEAR FROM AGE(NOW(),sh.started_at)) > 5
-- изначально было current_date-started_at > 365 * 5

-- 15.Для каждого хобби вывести количество людей, которые им занимаются.
-- SELECT h.name, COUNT(sh.student_id)
-- FROM hobby h INNER JOIN students_hobby sh ON h.id=sh.hobby_id
-- GROUP BY h.name

-- 16.Вывести ИД самого популярного хобби.
-- SELECT sh.hobby_id, COUNT (sh.hobby_id)
-- FROM students_hobby sh
-- GROUP BY sh.hobby_id
-- ORDER BY COUNT (sh.hobby_id) DESC LIMIT 1

-- 17.Вывести всю информацию о студентах, занимающихся самым популярным хобби.
-- SELECT st.*
-- FROM student st INNER JOIN students_hobby sh ON st.id = sh.student_id
-- WHERE sh.hobby_id =(
-- SELECT sh.hobby_id
-- FROM students_hobby sh
-- GROUP BY sh.hobby_id
-- ORDER BY COUNT (sh.hobby_id) DESC LIMIT 1)

-- 18.Вывести ИД 3х хобби с максимальным риском.
-- SELECT h.id, h.risk
-- FROM hobby h
-- ORDER BY risk DESC LIMIT 3

-- 19.Вывести 10 студентов, которые занимаются одним (или несколькими) хобби самое продолжительно время.
--coalesce заменяет null на значение, которое указано после запятой - в данном случае на now - текущее время
-- SELECT st.name, AGE(COALESCE(finished_at,NOW()) , started_at) as time
-- FROM student st INNER JOIN students_hobby sh ON st.id = sh.student_id
-- ORDER BY time DESC LIMIT 10

-- 20.Вывести номера групп (без повторений), в которых учатся студенты из предыдущего запроса.
-- !!!!!! у меня не работает вообще ничего в селекте кроме sub.name, на остальных он говорит column sub.n_group does not exist, пробовал со всеми полями
-- SELECT DISTINCT sub.n_group
-- FROM (SELECT st.name, AGE(COALESCE(finished_at,NOW()) , started_at) as time
-- FROM student st INNER JOIN students_hobby sh ON st.id = sh.student_id
-- ORDER BY time DESC LIMIT 10) sub

-- 21.Создать представление, которое выводит номер зачетки, имя и фамилию студентов, отсортированных по убыванию среднего балла.
-- CREATE OR REPLACE VIEW st_srBall AS
-- SELECT st.id, st.name, st.surname
-- FROM student st
-- ORDER BY st.score DESC

-- 22.Представление: найти каждое популярное хобби на каждом курсе.
-- CREATE OR REPLACE VIEW h_popular AS
-- SELECT DISTINCT ON (1) st.n_group/1000 course, h.name, count(h.name)
-- FROM student st INNER JOIN students_hobby sh ON st.id=sh.student_id INNER JOIN hobby h ON h.id=sh.hobby_id 
-- GROUP BY course, h.name
-- ORDER BY course, count(h.name) DESC

-- 23.Представление: найти хобби с максимальным риском среди самых популярных хобби на 2 курсе.
-- CREATE OR REPLACE VIEW h_maxriskpopular AS
-- SELECT  h.name, h.risk, count(h.name)
-- FROM student st INNER JOIN students_hobby sh ON st.id=sh.student_id INNER JOIN hobby h ON h.id=sh.hobby_id 
-- WHERE st.n_group/1000 = 2
-- GROUP BY h.name, h.risk
-- ORDER BY count(h.name) DESC, h.risk DESC
-- LIMIT 1
